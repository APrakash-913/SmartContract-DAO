const { ethers, network } = require("hardhat")
const {
    NEW_STORE_VALUE,
    FUNC,
    PROPOSAL_DESCRIPTION,
    developmentChains,
    VOTING_DELAY,
    proposalFile,
} = require("../helper-hardhat-config")

const { moveBlocks } = require("../utils/move-blocks")
const { fs } = require("fs") // ****

module.exports = async (args, functionToCall, proposalDescription) => {
    const governor = await ethers.getContract("GovernorContracts")
    const box = await ethers.getContract("Box")
    // need to encode all function parameters
    const encodeFunctionCall = box.interface.encodeFunctionData(
        functionToCall,
        args
    )
    console.log(encodeFunctionCall)
    console.log(`Proposing ${functionToCall} on ${box.address} with ${args}`)
    console.log(`Proposal Description \n ${proposalDescription}`)

    const proposeTx = await governor.propose(
        [box.address],
        [0],
        [encodeFunctionCall],
        proposalDescription
    )
    const proposeReceipt = await proposeTx.wait(1)

    if (developmentChains.includes(network.name)) {
        // Move blocks ahead to save time
        await moveBlocks(VOTING_DELAY + 1)
    }
    // We need ""ProposalId"" generated by 'Propose' function.
    // We can find it in "emit" of 'Propose' function.
    const proposalId = proposeReceipt.events[0].args.proposalId
    let proposals = JSON.parse(fs.readFileSync(proposalFile), "utf-8")
    proposals[network.config.chainId.toString()].push(proposalId.toString())
    fs.writeFileSync(proposalFile, JSON.stringify(proposals))
}

propose([NEW_STORE_VALUE], FUNC, PROPOSAL_DESCRIPTION)
    .then(() => process.exit(0))
    .catch((error) => {
        console.log(error)
        process.exit(1)
    })
